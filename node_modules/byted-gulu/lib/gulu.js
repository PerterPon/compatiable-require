const http = require('http');
const path = require('path');
const fs = require('fs');
const assert = require('assert');
const Koa = require('koa');
const Router = require('koa-router');
const extend = require('extend');
const camelCase = require('camelcase');
const is = require('is-type-of');
const Loader = require('./loader');
const Resolver = require('./resolver');
const BaseAppClass = require('./bultin-class/base-app-class');
const BaseContextClass = require('./bultin-class/base-context-class');
const { createCoreLogger, createAppLogger, createContextLogger } = require('./logger');
const pkg = require('../package.json');

class Gulu extends Koa {
    constructor(options = {}) {
        super(options);        
        this.root = options.root || process.cwd();
        this.logDir = options.logDir || path.resolve(this.root, 'log');
        this.guluVersion = pkg.version;
        this.name = options.name || path.basename(this.root);        
        this.units = [];
        this.middlewares = [];
        this.config = {};
        this.controller = {};
        this.controllerClasses = {};
        this.serviceClasses = {};        
        this.router = new Router();
        this.loader = new Loader(this);
        this.resolver = new Resolver(this);
        this.coreLogger = createCoreLogger(this);
        this.logger = createAppLogger(this);
        this.contextLogger = createContextLogger(this)

        Object.defineProperty(this.context, 'logger', {
            get() {
                return this.app.contextLogger;
            }
        });

        /**
         * Koa错误处理
         */
        this.on('error', (error, ctx) => {
            const message = error.stack || error.message;
            this.logger.error(message);
            if (ctx) {
                ctx.logger.error(message);
            }
        });

        /**
         * Unhandled rejection处理
         */
        process.on('unhandledRejection', (error, promise) => {
            this.coreLogger.error(error.stack || error.message);
        });
    }

    /**
     * 加载功能单元
     * @param {String} root - 功能单元根目录
     */
    load(root) {
        if (this.units.some(unit => unit.root === root)) {
            return this;
        }

        const tree = this.resolver.resolveUnit(root);
        const nodes = this.traverse(tree);

        for (const node of nodes) {
            if (!node.pkg
                || !this.units.some(unit => unit.pkg && unit.pkg.name === node.pkg.name)) {
                this.units.push(node);
            }
        }
        return this;
    }

    /**
     * 覆盖Koa的listen方法
     * @param {Array} args 
     */
    listen(...args) {
        const server = http.createServer(this.callback());

        this.beforeStart().then(() => {
            server.listen(...args);
        }).catch((e) => {
            this.coreLogger.error(e.stack || e.message);
            process.exit();
        });

        server.on('listening', () => {
            this.afterStart().then(() => {
                this.coreLogger.info(`[core] server started on port ${server.address().port}`);
            }).catch((e) => {
                this.coreLogger.error(e.stack || e.message);
                process.exit();
            });
        });

        return server;
    }

    /**
     * 应用启动前逻辑
     */
    async beforeStart() {
        this.mergeConfig();

        for (const unit of this.units) {
            let beforeStart = unit.initiator;
            if (is.object(unit.initiator)) {
                beforeStart = unit.initiator.beforeStart;
            }
            if (is.asyncFunction(beforeStart) || is.function(beforeStart)) {
                await beforeStart(this);
            }
        }

        this.applyUnits();
    }

    /**
     * 应用启动后逻辑
     */
    async afterStart() {
        for (const unit of this.units) {
            if (is.object(unit.initiator)) {
                const afterStart = unit.initiator.afterStart;
                if (is.asyncFunction(afterStart) || is.function(afterStart)) {
                    await afterStart(this);
                }
            }
            this.coreLogger.info(`[core] ${unit.name} loaded`);
        }
    }

    /**
     * 合并配置
     */
    mergeConfig() {
        this.config = this.units.reduce(
            (target, unit) => extend(true, target, unit.config),
            this.config
        );
        return this;
    }

    /**
     * 应用目录单元
     */
    applyUnits() {        
        this.units.forEach((unit, index) => {
            unit.apply(this, index === this.units.length - 1);
        });
                
        this.use(this.router.routes()).use(this.router.allowedMethods());
        return this;
    }

    /**
     * 遍历树
     * @param {Object} tree - 树根节点
     */
    traverse(tree) {
        const nodes = [];
        for (const dependency of tree.dependencies) {
            nodes.push.apply(nodes, this.traverse(dependency));
        }
        nodes.push(tree);
        return nodes;
    }
}

Gulu.UnitLoader = Loader;
Gulu.Controller = BaseAppClass;
Gulu.Service = BaseContextClass;
Gulu.BaseAppClass = BaseAppClass;
Gulu.BaseContextClass = BaseContextClass;

module.exports = Gulu;