const assert = require('assert');
const path = require('path');
const is = require('is-type-of');
const camelCase = require('camelcase');

class Unit {
    constructor(options) {
        assert(options.root, 'Unit root can not be empty');

        this.root = options.root;     
        this.name = path.basename(this.root);
        this.pkg = options.pkg;
        this.config = options.config || {};
        this.controllerClasses = options.controllerClasses || {};
        this.serviceClasses = options.serviceClasses || {};
        this.routerRegister = options.routerRegister;
        this.initiator = options.initiator || {};
        this.extensions = {
            app:  options.extensions.app || {},
            context:  options.extensions.context || {},
            request:  options.extensions.request || {},
            response:  options.extensions.response || {},
        };
    }

    /**
     * 应用功能单元
     * @param {Object} app - Koa实例
     * @param {Boolean} isLast - 是否是最后一个功能单元
     */
    apply(app, isLast) {        
        this.applyMiddleware(app)
            .applyController(app)
            .applyService(app, isLast)
            .applyRouterRegister(app)
            .applyExtension(app);  
    }

    /**
     * 应用中间件
     * @param {Object} app - Koa实例
     */
    applyMiddleware(app) {
        (this.config.middleware || []).forEach(item => {
            let enable;
            let name;
            if (is.object(item)) {
                name = item.name;
                enable = item.enable;
            }
            if (is.string(item)) {
                name = item;
                enable = true;
            }                          
            if (enable === false) {
                return;
            }

            const options = app.config[camelCase(name)] || {};            
            const res = app.resolver.resolveMiddleware(this.root, name);
            const exist = app.middlewares.some(({ path, pkg }) => 
                (pkg && res.pkg && pkg.name === res.pkg.name) || path === res.path
            );
            if (exist) {
                return;
            }
            app.middlewares.push(res);
            app.use(res.middleware(options || {}, app, enable));
        });
        return this;
    }

    /**
     * 应用Controller
     * @param {Object} app - Koa实例
     */
    applyController(app) {
        Object.keys(this.controllerClasses).forEach(name => {
            const controller = new this.controllerClasses[name](app);        
            
            let proto = controller;
            while (proto) {
                proto = Object.getPrototypeOf(proto);
                if (proto === Object.prototype) {
                    break;
                }

                for (const name of Object.getOwnPropertyNames(proto)) {
                    if (name === 'constructor') {
                        continue;
                    }
                    const descriptor = Object.getOwnPropertyDescriptor(proto, name);                        
                    if (is.function(descriptor.value)) {
                        controller[name] = controller[name].bind(controller);
                    }
                }
            }

            app.controller[name] = controller;
            app.controllerClasses[name] = this.controllerClasses[name];
        });
        return this;
    }

    /**
     * 应用Service
     * @param {Object} app - Koa实例
     * @param {Boolean} isLast - 是否是最后一个功能单元
     */
    applyService(app, isLast) {        
        app.serviceClasses = Object.assign({}, app.serviceClasses, this.serviceClasses);

        if (isLast) {
            Object.defineProperty(app.context, 'service', {
                configurable: true,
                get() {     
                    if (!this.guluCachedService) {
                        this.guluCachedService = {};
                        Object.keys(app.serviceClasses).forEach(name => {
                            this.guluCachedService[name] = new app.serviceClasses[name](this);
                        });
                    }
                    return this.guluCachedService;
                }
            });
        }

        return this;
    }

    /**
     * 应用路由注册器
     * @param {Object} app - Koa实例
     */
    applyRouterRegister(app) {
        if (this.routerRegister) {
            this.routerRegister(app);
        }
        return this;
    }

    /**
     * 应用扩展
     * @param {Object} app - Koa实例
     */
    applyExtension(app) {             
        for (const name of Object.keys(this.extensions)) {
            let extension = this.extensions[name];
            if (is.function(extension)) {
                extension = extension(app);
            }

            let proto = app;
            if (name !== 'app') {
                proto = app[name];
            }

            const properties = [...Object.getOwnPropertyNames(extension), ...Object.getOwnPropertySymbols(extension)];
            for (const property of properties) {
                const descriptor = Object.getOwnPropertyDescriptor(extension, property);
                Object.defineProperty(proto, property, descriptor);
            }
        }
        return this;
    }    
}

module.exports = Unit;