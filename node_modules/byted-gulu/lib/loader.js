const fs = require('fs');
const path = require('path');
const assert = require('assert');
const extend = require('extend');
const is = require('is-type-of');
const camelCase = require('camelcase');
const Unit = require('./unit');

class Loader {
    constructor(app) {
        this.app = app;
    }

    /**
     * 加载目录单元
     * @param {String} root - 目录单元路径
     */
    load(root) {
        return new Unit({
            root,
            pkg: this.loadPKG(root),
            config: this.loadConfig(root),
            controllerClasses: this.loadControllerClass(root),
            serviceClasses: this.loadServiceClass(root),
            routerRegister: this.loadRouterRegister(root),
            initiator: this.loadInitiator(root),
            extensions: {
                app: this.loadExtension(root, 'app'),
                context: this.loadExtension(root, 'context'),
                request: this.loadExtension(root, 'request'),
                response: this.loadExtension(root, 'response'),
            },
        });        
    }

    /**
     * 加载NPM包信息
     * @param {String} root - 功能单元根目录
     */
    loadPKG(root) {
        let pkg;
        try {
            pkg = require(path.resolve(root, 'package.json'));
        } catch (e) {
            pkg = null;
        }
        return pkg;
    }

    /**
     * 加载配置
     * @param {String} root - 目录单元路径
     */
    loadConfig(root) {
        const aggregatedDefaultConfig = {}; // 默认的聚合config
        const aggregatedEnvConfig = {};     // 环境的聚合config
        const scatteredDefaultConfig = {};  // 默认的分散config
        const scatteredEnvConfig = {};      // 环境的分散config

        const configDir = path.resolve(root, 'config');
        const env = this.app.env || '';
        
        if (!fs.existsSync(configDir)) {
           return {}; 
        }

        fs.readdirSync(configDir).forEach(filename => {
            const reg = /^([^\.]+)\.([^\.]+)\.js$/;
            const match = reg.exec(filename);
            if (!match || (match[2] !== 'default' && match[2] !== env)) {
                return;
            }
            
            let config = require(path.resolve(configDir, filename));
            if (is.function(config)) {
                config = config(this.app);
            }

            assert(is.object(config), 'config must be object or function to return object.');
            
            if (match[1] === 'config') {
                if (match[2] === 'default') {
                    extend(true, aggregatedDefaultConfig, config);
                } else {
                    extend(true, aggregatedEnvConfig, config);
                }
            } else {
                if (match[2] === 'default') {
                    extend(true, scatteredDefaultConfig, { [match[1]]: config });
                } else {
                    extend(true, scatteredEnvConfig, { [match[1]]: config }); 
                }
            }
        });
        
        return extend(
            true, 
            aggregatedDefaultConfig, 
            scatteredDefaultConfig, 
            aggregatedEnvConfig, 
            scatteredEnvConfig
        );
    }

    /**
     * 加载Controller
     * @param {String} root - 目录单元路径
     */
    loadControllerClass(root) {                
        const controllerDir = path.resolve(root, 'app', 'controller');
        if (!fs.existsSync(controllerDir) || !fs.statSync(controllerDir).isDirectory()) {
            return;
        }
        const controllerClasses = {};
        fs.readdirSync(controllerDir).forEach(filename => {
            const filepath = path.resolve(controllerDir, filename);
            if (!fs.statSync(filepath).isFile() || path.extname(filepath) !== '.js') {
                return;
            }       

            const controllerClass = require(filepath);
            assert(is.class(controllerClass), 'controller must be class.');    
            const controllerClassName = camelCase(path.basename(filename, '.js'));
            controllerClasses[controllerClassName] = controllerClass;
        });
        return controllerClasses;
    }

    /**
     * 加载Service
     * @param {String} root - 目录单元路径
     */
    loadServiceClass(root) {
        const serviceDir = path.resolve(root, 'app', 'service');
        if (!fs.existsSync(serviceDir) || !fs.statSync(serviceDir).isDirectory()) {
            return;
        }
        const serviceClasses = {};
        fs.readdirSync(serviceDir).forEach(filename => {
            let filepath = path.resolve(serviceDir, filename);
            if (fs.statSync(filepath).isDirectory()) {
                filepath = path.resolve(serviceDir, filename, 'index.js');
            }
            
            if (!fs.statSync(filepath).isFile() || path.extname(filepath) !== '.js') {
                return;
            }            

            const serviceClass = require(filepath);
            assert(is.class(serviceClass), 'service must be class.');                        
            const serviceClassName = camelCase(path.basename(filename, '.js'));
            serviceClasses[serviceClassName] = serviceClass;
        });
        return serviceClasses;
    }

    /**
     * 加载路由注册器
     * @param {String} root - 目录单元路径
     */
    loadRouterRegister(root) {
        const registerPath = path.resolve(root, 'app', 'router.js');
        if (!fs.existsSync(registerPath)) {
            return;
        }

        const register = require(registerPath);
        assert(is.function(register), 'router register must be function.');
        return register;
    }

    /**
     * 加载initiator
     * @param {String} root - 目录单元路径
     */
    loadInitiator(root) {
        const initiatorPath = path.resolve(root, 'app.js');
        if (!fs.existsSync(initiatorPath)) {
            return;
        }

        const initiator = require(initiatorPath);
        assert(
            is.function(initiator) || is.asyncFunction(initiator) || is.object(initiator), 
            'app initiator must be function'
        );
        return initiator;
    }

    /**
     * 加载扩展
     * @param {String} root - 目录单元路径
     * @param {String} name - 扩展名称
     */
    loadExtension(root, name) {
        const extensionPath = path.resolve(root, 'app', 'extension', `${name}.js`);
        if (!fs.existsSync(extensionPath)) {
            return;
        }

        const extension = require(extensionPath);
        assert(is.object(extension) || is.function(extension), `${name} extension must be object or function.`);
        return extension;
    }
}

module.exports = Loader;